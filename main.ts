import {
  ApplicationCommandOptionTypes,
  Bot,
  createBot,
  Intents,
  InteractionResponseTypes,
  startBot,
} from "https://deno.land/x/discordeno@18.0.1/mod.ts";

const kv = await Deno.openKv();

interface DpsEntry {
  username: string;
  dps: bigint;
}

// Âçò‰Ωç„Å®‰πóÊï∞„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
const units: Record<string, bigint> = {
  "No": 10n ** 30n,
  "Dc": 10n ** 33n,
  "Ud": 10n ** 36n,
};

// Discord Bot„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆ‰ΩúÊàê
const bot: Bot = createBot({
  token: Deno.env.get("DISCORD_TOKEN")!,
  intents: Intents.Guilds,
  events: {
    ready() {
      console.log("Bot is ready!");
    },
  },
});

// „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÅÆÂÆöÁæ©
bot.events.guildCreate = async (guild) => {
  const commands = [
    {
      name: "dps",
      description: "DPS„ÇíÁÆ°ÁêÜ„Åó„Åæ„Åô„ÄÇ",
      options: [
        {
          name: "register",
          description: "Ëá™ÂàÜ„ÅÆDPS„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ",
          type: ApplicationCommandOptionTypes.SubCommand,
          options: [
            {
              name: "value",
              description: "DPS„ÅÆÊï∞ÂÄ§„ÄÇ",
              type: ApplicationCommandOptionTypes.String,
              required: true,
            },
            {
              name: "unit",
              description: "DPS„ÅÆÂçò‰Ωç„ÄÇ",
              type: ApplicationCommandOptionTypes.String,
              choices: [
                { name: "No", value: "No" },
                { name: "Dc", value: "Dc" },
                { name: "Ud", value: "Ud" },
              ],
              required: false,
            },
          ],
        },
        {
          name: "ranking",
          description: "ÁèæÂú®„ÅÆDPS„É©„É≥„Ç≠„É≥„Ç∞„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ",
          type: ApplicationCommandOptionTypes.SubCommand,
        },
      ],
    },
  ];

  await bot.helpers.upsertGuildApplicationCommands(guild.id, commands);
};

// „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÅÆÂá¶ÁêÜ
bot.events.interactionCreate = async (interaction) => {
  if (!interaction.isApplicationCommand()) return;

  const command = interaction.data?.name;
  const subcommand = interaction.data?.options?.[0]?.name;

  if (command === "dps") {
    if (subcommand === "register") {
      await handleDpsRegister(interaction);
    } else if (subcommand === "ranking") {
      await handleDpsRanking(interaction);
    }
  }
};

/**
 * `/dps register` „Ç≥„Éû„É≥„Éâ„ÅÆÂá¶ÁêÜ
 */
async function handleDpsRegister(interaction: any) {
  const valueStr = interaction.data?.options?.[0]?.options?.[0]?.value as string;
  const unit = interaction.data?.options?.[0]?.options?.[1]?.value as string | undefined;
  const user = interaction.user;
  const guildId = interaction.guildId!;

  // ÂÖ•ÂäõÂÄ§„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„ÇíÂº∑Âåñ
  if (!/^\d+$/.test(valueStr)) {
    await bot.helpers.sendInteractionResponse(
      interaction.id,
      interaction.token,
      {
        type: InteractionResponseTypes.ChannelMessageWithSource,
        data: {
          content: 'üî¢ DPS„ÅÆÊï∞ÂÄ§„ÅØÊ≠£„ÅÆÊï¥Êï∞„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ',
          flags: 64, // Ephemeral message
        },
      }
    );
    return;
  }

  try {
    let dpsValue = BigInt(valueStr);
    if (unit && units[unit]) {
      dpsValue *= units[unit];
    }

    const dpsEntry: DpsEntry = {
      username: user.username,
      dps: dpsValue,
    };

    // Deno.Kv„Å´„Éá„Éº„Çø„Çí‰øùÂ≠ò
    await kv.set(["dps", guildId, user.id], dpsEntry);

    await bot.helpers.sendInteractionResponse(
      interaction.id,
      interaction.token,
      {
        type: InteractionResponseTypes.ChannelMessageWithSource,
        data: {
          content: `‚úÖ **${user.username}** „Åï„Çì„ÅÆDPS„Çí **${valueStr}${unit ? unit : ''}** „Å´Êõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇ`,
          flags: 64,
        },
      }
    );
    
    // „É©„É≥„Ç≠„É≥„Ç∞Êõ¥Êñ∞„Å®„É≠„Éº„É´‰ªò‰∏é„ÇíÂÆüË°å
    await updateRoles(guildId);

  } catch (error) {
    console.error("DPSÁôªÈå≤„Ç®„É©„Éº:", error);
    await bot.helpers.sendInteractionResponse(
      interaction.id,
      interaction.token,
      {
        type: InteractionResponseTypes.ChannelMessageWithSource,
        data: {
          content: 'ü§î „Éá„Éº„Çø„ÅÆ‰øùÂ≠ò‰∏≠„Å´‰∫àÊúü„Åõ„Å¨„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ',
          flags: 64,
        },
      }
    );
  }
}

/**
 * `/dps ranking` „Ç≥„Éû„É≥„Éâ„ÅÆÂá¶ÁêÜ
 */
async function handleDpsRanking(interaction: any) {
  const guildId = interaction.guildId!;
  const entries: [string, DpsEntry][] = [];

  try {
    const iter = kv.list({ prefix: ["dps", guildId] });
    for await (const entry of iter) {
      entries.push([entry.key[2] as string, entry.value as DpsEntry]);
    }
  } catch (error) {
    console.error("KV„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº:", error);
    await bot.helpers.sendInteractionResponse(
      interaction.id,
      interaction.token,
      {
        type: InteractionResponseTypes.ChannelMessageWithSource,
        data: {
          content: 'ü§î „É©„É≥„Ç≠„É≥„Ç∞„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ',
          flags: 64,
        },
      }
    );
    return;
  }

  const sortedUsers = entries.sort(([, a], [, b]) => (b.dps > a.dps) ? 1 : (b.dps < a.dps) ? -1 : 0);

  if (sortedUsers.length === 0) {
    await bot.helpers.sendInteractionResponse(
      interaction.id,
      interaction.token,
      {
        type: InteractionResponseTypes.ChannelMessageWithSource,
        data: {
          content: '„É©„É≥„Ç≠„É≥„Ç∞„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ',
        },
      }
    );
    return;
  }

  const rankingMessage = sortedUsers.slice(0, 10).map(([userId, entry], index) => {
    const rank = index + 1;
    const dpsStr = formatDps(entry.dps);
    return `**${rank}.** ${entry.username}: **${dpsStr}**`;
  }).join('\n');

  await bot.helpers.sendInteractionResponse(
    interaction.id,
    interaction.token,
    {
      type: InteractionResponseTypes.ChannelMessageWithSource,
      data: {
        content: `### DPS„É©„É≥„Ç≠„É≥„Ç∞ üëë\n\n${rankingMessage}`,
      },
    }
  );
}

// DPS„ÇíÂçò‰Ωç‰ªò„Åç„ÅÆÊñáÂ≠óÂàó„Å´Â§âÊèõ„Åô„Çã„Éò„É´„Éë„ÉºÈñ¢Êï∞
function formatDps(dps: bigint): string {
  const sortedUnits = Object.entries(units).sort(([, a], [, b]) => (b > a) ? 1 : (b < a) ? -1 : 0);

  for (const [unit, value] of sortedUnits) {
    if (dps >= value) {
      const formatted = (dps / value).toString();
      return `${formatted}${unit}`;
    }
  }
  return dps.toString();
}

// „É≠„Éº„É´„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞
async function updateRoles(guildId: bigint) {
  const entries: [string, DpsEntry][] = [];
  try {
    const iter = kv.list({ prefix: ["dps", guildId] });
    for await (const entry of iter) {
      entries.push([entry.key[2] as string, entry.value as DpsEntry]);
    }
  } catch (error) {
    console.error("„É≠„Éº„É´Êõ¥Êñ∞ÊôÇ„ÅÆKVË™≠„ÅøËæº„Åø„Ç®„É©„Éº:", error);
    return;
  }
  
  const sortedUsers = entries.sort(([, a], [, b]) => (b.dps > a.dps) ? 1 : (b.dps < a.dps) ? -1 : 0);

  const roleMap = {
      1: Deno.env.get("ROLE_ID_TOP1")!,
      2: Deno.env.get("ROLE_ID_TOP2")!,
      3: Deno.env.get("ROLE_ID_TOP3")!,
      10: Deno.env.get("ROLE_ID_TOP10")!,
  };

  // ÂÖ®„É¶„Éº„Ç∂„Éº„ÅÆÊó¢Â≠ò„É≠„Éº„É´„ÇíÂâäÈô§
  const guild = await bot.helpers.getGuild(guildId);
  if (guild) {
    for (const memberId of await guild.members) {
      try {
        const member = await bot.helpers.getMember(guildId, memberId);
        if (member) {
          for (const roleId of Object.values(roleMap)) {
            if (member.roles.includes(BigInt(roleId))) {
                await bot.helpers.removeRole(guildId, memberId, BigInt(roleId));
            }
          }
        }
      } catch (error) {
        console.error(`„É≠„Éº„É´ÂâäÈô§„Ç®„É©„Éº („É¶„Éº„Ç∂„ÉºID: ${memberId}):`, error);
      }
    }
  }

  // Êñ∞„Åó„ÅÑ„É©„É≥„Ç≠„É≥„Ç∞„Å´Âü∫„Å•„ÅÑ„Å¶„É≠„Éº„É´„Çí‰ªò‰∏é
  for (let i = 0; i < sortedUsers.length; i++) {
    const rank = i + 1;
    const [userId] = sortedUsers[i];
    if (roleMap[rank as keyof typeof roleMap]) {
      try {
        const roleId = BigInt(roleMap[rank as keyof typeof roleMap]);
        await bot.helpers.addRole(guildId, BigInt(userId), roleId);
      } catch (error) {
        console.error(`„É≠„Éº„É´‰ªò‰∏é„Ç®„É©„Éº („É©„É≥„ÇØ: ${rank}, „É¶„Éº„Ç∂„ÉºID: ${userId}):`, error);
      }
    }
  }
}

// „Éú„ÉÉ„Éà„ÅÆËµ∑Âãï

await startBot(bot);

Deno.cron("Continuous Request", "*/2 * * * *", () => {
    console.log("running...");
});
